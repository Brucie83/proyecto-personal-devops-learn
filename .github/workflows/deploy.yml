name: 🚀 Sandbox DevOps - Despliegue y Configuración

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Ambiente a desplegar'
        required: true
        default: 'sandbox'
        type: choice
        options:
        - sandbox
        - staging
        - production

env:
  VM_NAME: sandbox-vm
  ADMIN_USER: sandboxadmin
  DOCKER_IMAGE: sandbox-vm:latest

jobs:
  # Job 1: Validación de Infraestructura
  validate-infrastructure:
    name: 🔍 Validar Infraestructura
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"
        
    - name: 🔍 Validar sintaxis Terraform
      run: |
        cd infrastructure
        terraform init
        terraform validate
        terraform fmt -check
        
    - name: 📋 Validar archivos de configuración
      run: |
        echo "Validando archivos de configuración..."
        jq . secrets.example.json > /dev/null
        jq . keyvault.json > /dev/null
        echo "✅ Archivos JSON válidos"

  # Job 2: Construir Imagen Docker
  build-image:
    name: 🐳 Construir Imagen VM
    runs-on: ubuntu-latest
    needs: validate-infrastructure
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🐳 Construir imagen Docker
      run: |
        docker build -t $DOCKER_IMAGE ./docker
        docker images | grep $DOCKER_IMAGE
        
    - name: 💾 Guardar imagen
      run: |
        docker save $DOCKER_IMAGE | gzip > sandbox-vm.tar.gz
        
    - name: 📤 Subir artefacto
      uses: actions/upload-artifact@v4
      with:
        name: sandbox-vm-image
        path: sandbox-vm.tar.gz

  # Job 3: Desplegar Infraestructura
  deploy-infrastructure:
    name: 🏗️ Desplegar Infraestructura
    runs-on: ubuntu-latest
    needs: build-image
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 📥 Descargar imagen
      uses: actions/download-artifact@v4
      with:
        name: sandbox-vm-image
        path: ./
        
    - name: 🐳 Cargar imagen
      run: |
        gunzip -c sandbox-vm.tar.gz | docker load
        
    - name: 🔒 Verificar locks
      run: |
        if [ -f "INFRASTRUCTURE.lock" ]; then
          echo "❌ Lock detectado. No se puede desplegar."
          exit 1
        fi
        echo "✅ No hay locks activos"
        
    - name: 🚀 Desplegar VM simulada
      run: |
        # Crear directorios para discos simulados
        mkdir -p ./system ./data
        
        # Detener contenedor existente si existe
        docker stop $VM_NAME 2>/dev/null || true
        docker rm $VM_NAME 2>/dev/null || true
        
        # Ejecutar contenedor con especificaciones de VM
        docker run -d \
          --name $VM_NAME \
          --cpus=2 \
          --memory=4g \
          --restart unless-stopped \
          -p 22:22 \
          -p 80:80 \
          -p 1433:1433 \
          -v $(pwd)/system:/system \
          -v $(pwd)/data:/data \
          -e VM_NAME=$VM_NAME \
          -e ADMIN_USER=$ADMIN_USER \
          $DOCKER_IMAGE
        
        # Esperar a que el contenedor esté listo
        sleep 30
        
        # Verificar que el contenedor esté corriendo
        docker ps | grep $VM_NAME
        
    - name: 📋 Verificar estado de la VM
      run: |
        echo "Estado del contenedor:"
        docker ps -a | grep $VM_NAME
        
        echo "Recursos asignados:"
        docker stats --no-stream $VM_NAME
        
        echo "Discos montados:"
        docker exec $VM_NAME ls -la /system /data

  # Job 4: Instalar Software
  install-software:
    name: 📦 Instalar Software
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 🔧 Ejecutar script de instalación
      run: |
        chmod +x ./scripts/install-software.sh
        ./scripts/install-software.sh
        
    - name: 🔄 Reiniciar VM (simulado)
      run: |
        echo "🔄 Reiniciando VM..."
        docker restart $VM_NAME
        sleep 30
        
    - name: 📊 Verificar instalación
      run: |
        echo "=== Verificando software instalado ==="
        
        echo "Java:"
        docker exec $VM_NAME java -version
        
        echo "Node.js:"
        docker exec $VM_NAME node -v
        docker exec $VM_NAME npm -v
        
        echo "Git:"
        docker exec $VM_NAME git --version
        
        echo "LibreOffice:"
        docker exec $VM_NAME libreoffice --version 2>/dev/null || echo "Instalado"
        
        echo "VSCode:"
        docker exec $VM_NAME code --version 2>/dev/null || echo "Instalado"
        
        echo "Variables de entorno:"
        docker exec $VM_NAME env | grep -E "(JAVA|NODE|GIT|PATH)" | sort

  # Job 5: Rotación de Credenciales
  rotate-credentials:
    name: 🔄 Rotar Credenciales
    runs-on: ubuntu-latest
    needs: install-software
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 🔧 Ejecutar rotación de credenciales
      run: |
        chmod +x ./scripts/rotate-credentials.sh
        ./scripts/rotate-credentials.sh
        
    - name: 📋 Verificar nueva contraseña
      run: |
        echo "Nueva contraseña generada:"
        cat secrets.json | jq -r '.adminPassword' | head -c 20
        echo "..."
        
    - name: 🔐 Actualizar KeyVault simulado
      run: |
        echo "Actualizando políticas de acceso..."
        jq '.accessPolicies[0].userPrincipalName = "fabio.rincon@arroyoconsulting.net"' keyvault.json > keyvault_temp.json
        jq '.accessPolicies[1].userPrincipalName = "andres.zapata@arroyoconsulting.net"' keyvault_temp.json > keyvault.json
        rm keyvault_temp.json
        
        echo "✅ KeyVault actualizado:"
        cat keyvault.json | jq '.accessPolicies[].userPrincipalName'

  # Job 6: Validación Final
  final-validation:
    name: ✅ Validación Final
    runs-on: ubuntu-latest
    needs: rotate-credentials
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 🔍 Verificar infraestructura
      run: |
        echo "=== Validación Final ==="
        
        echo "1. Estado de la VM:"
        docker ps | grep $VM_NAME
        
        echo "2. Recursos asignados:"
        docker stats --no-stream $VM_NAME
        
        echo "3. Software instalado:"
        docker exec $VM_NAME java -version 2>&1 | head -1
        docker exec $VM_NAME node -v
        docker exec $VM_NAME git --version
        
        echo "4. Variables de entorno:"
        docker exec $VM_NAME echo "JAVA_HOME: $JAVA_HOME"
        docker exec $VM_NAME echo "PATH: $PATH"
        
        echo "5. Secretos configurados:"
        echo "Admin password: $(cat secrets.json | jq -r '.adminPassword' | head -c 10)..."
        
        echo "6. KeyVault configurado:"
        cat keyvault.json | jq '.accessPolicies | length' | echo "Usuarios con acceso: $(cat)"
        
        echo "7. Puertos abiertos:"
        docker port $VM_NAME
        
    - name: 📊 Generar reporte
      run: |
        echo "## 🎉 Despliegue Completado Exitosamente" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Infraestructura Desplegada:" >> $GITHUB_STEP_SUMMARY
        echo "- VM Simulada: $VM_NAME" >> $GITHUB_STEP_SUMMARY
        echo "- Usuario Admin: $ADMIN_USER" >> $GITHUB_STEP_SUMMARY
        echo "- Recursos: 2 CPUs, 4GB RAM" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Software Instalado:" >> $GITHUB_STEP_SUMMARY
        echo "- Java 11" >> $GITHUB_STEP_SUMMARY
        echo "- Node.js 18" >> $GITHUB_STEP_SUMMARY
        echo "- Git" >> $GITHUB_STEP_SUMMARY
        echo "- LibreOffice (Office simulado)" >> $GITHUB_STEP_SUMMARY
        echo "- VSCode" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔐 Seguridad:" >> $GITHUB_STEP_SUMMARY
        echo "- Credenciales rotadas automáticamente" >> $GITHUB_STEP_SUMMARY
        echo "- KeyVault configurado con políticas de acceso" >> $GITHUB_STEP_SUMMARY
        echo "- Usuarios autorizados: fabio.rincon@arroyoconsulting.net, andres.zapata@arroyoconsulting.net" >> $GITHUB_STEP_SUMMARY

  # Job 7: Limpieza (solo en PR cerrados)
  cleanup:
    name: 🧹 Limpieza
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 🔒 Verificar locks antes de limpiar
      run: |
        if [ -f "INFRASTRUCTURE.lock" ]; then
          echo "❌ Lock detectado. No se puede limpiar."
          exit 1
        fi
        
    - name: 🧹 Limpiar recursos
      run: |
        echo "Limpiando recursos..."
        docker stop $VM_NAME 2>/dev/null || true
        docker rm $VM_NAME 2>/dev/null || true
        docker rmi $DOCKER_IMAGE 2>/dev/null || true
        echo "✅ Limpieza completada"
